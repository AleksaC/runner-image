#!/usr/bin/env python3
import argparse
import os.path
import subprocess
import tempfile


def test_can_build_python_tools(tag: str, pc: str, *, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    subprocess.check_call((
        'docker', 'run', '--rm',
        '--user', f'{os.getuid()}:{os.getgid()}',
        *userns,
        '--volume', f'{os.getcwd()}:/git:ro',
        '--volume', f'{pc}:/pc:rw',
        '--workdir', '/git',
        tag, 'pre-commit', 'install-hooks',
    ))


def test_can_run_python_tools(tag: str, pc: str, *, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    subprocess.check_call((
        'docker', 'run', '--rm',
        '--user', f'{os.getuid()}:{os.getgid()}',
        *userns,
        '--volume', f'{os.getcwd()}:/git:rw',
        '--volume', f'{pc}:/pc:ro',
        '--workdir', '/git',
        tag, 'pre-commit', 'run', '--all-files', '--show-diff-on-failure',
    ))


def test_considers_system_ruby_suitable(tag: str) -> None:
    output = subprocess.check_output((
        'docker', 'run', '--rm',
        tag, 'python3', '-c',
        'import pre_commit.languages.ruby;'
        'print(pre_commit.languages.ruby.get_default_version())',
    ))
    assert output == b'system\n', output


def test_considers_system_node_suitable(tag: str) -> None:
    output = subprocess.check_output((
        'docker', 'run', '--rm',
        tag, 'python3', '-c',
        'import pre_commit.languages.node;'
        'print(pre_commit.languages.node.get_default_version())',
    ))
    assert output == b'system\n', output


NODE_HOOK = '''\
repos:
-   repo: local
    hooks:
    -   id: prettier
        name: prettier
        entry: prettier
        types: [javascript]
        language: node
        additional_dependencies: [prettier@v2.1.2]
'''


def test_can_run_node_hook(tag: str, pc: str, podman: bool) -> None:
    userns = ('--userns=keep-id',) if podman else ()
    with tempfile.TemporaryDirectory() as tmpdir:
        subprocess.check_call(('git', 'init', tmpdir))
        with open(os.path.join(tmpdir, '.pre-commit-config.yaml'), 'w') as f:
            f.write(NODE_HOOK)
        with open(os.path.join(tmpdir, 't.js'), 'w') as f:
            f.write("console.log('hello world');")
        subprocess.check_call(('git', '-C', tmpdir, 'add', '.'))

        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:ro',
            '--volume', f'{pc}:/pc:rw',
            '--workdir', '/git',
            tag, 'pre-commit', 'install-hooks',
        ))
        subprocess.check_call((
            'docker', 'run', '--rm',
            '--user', f'{os.getuid()}:{os.getgid()}',
            *userns,
            '--volume', f'{tmpdir}:/git:rw',
            '--volume', f'{pc}:/pc:ro',
            '--workdir', '/git',
            tag, 'pre-commit', 'run', '--all-files', '--show-diff-on-failure',
        ))


def test_can_install_ffi_gem(tag: str) -> None:
    subprocess.check_call((
        'docker', 'run', '--rm', tag,
        'gem', 'install', '--install-dir=/tmp', '--no-document', 'ffi',
    ))


def test_can_run_go(tag: str) -> None:
    subprocess.check_call(('docker', 'run', '--rm', tag, 'go', 'version'))


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('--podman', action='store_true')
    parser.add_argument('tag')
    args = parser.parse_args()

    with tempfile.TemporaryDirectory() as pc:
        print(' can build python tools '.center(79, '='), flush=True)
        test_can_build_python_tools(args.tag, pc, podman=args.podman)
        print(' can run python tools '.center(79, '='), flush=True)
        test_can_run_python_tools(args.tag, pc, podman=args.podman)
        print(' considers system ruby suitable '.center(79, '='), flush=True)
        test_considers_system_ruby_suitable(args.tag)
        print(' condiders system node suitable '.center(79, '='), flush=True)
        test_considers_system_node_suitable(args.tag)
        print(' can run node hook '.center(79, '='), flush=True)
        test_can_run_node_hook(args.tag, pc, podman=args.podman)
        print(' can install ffi gem '.center(79, '='), flush=True)
        test_can_install_ffi_gem(args.tag)
        print(' can run go '.center(79, '='), flush=True)
        test_can_run_go(args.tag)

    return 0


if __name__ == '__main__':
    exit(main())
